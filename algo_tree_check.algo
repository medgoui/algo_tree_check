FUNCTION number_of_nodes(root: ^BT) : INTEGER
BEGIN
    IF (root = NULL) THEN
        RETURN 0;
    ELSE
        RETURN 1 + number_of_nodes(root^.LC) + number_of_nodes(root^.RC);
    END_IF
END

FUNCTION max(a,b: INTEGER) : INTEGER;
BEGIN
    IF (a > b) THEN
        RETURN a;
    ELSE
        RETURN b;
    END_IF
END

FUNCTION height(root : ^BT) : INTEGER
BEGIN
    IF(root = NULL) THEN
        RETURN 0;
    ELSE
        RETURN 1 + max(height(root^.LC),height(root^.RC));
    END_IF
END

FUNCTION numb_leaves(root: ^BT) : INTEGER
BEGIN
    IF (root = NULL) THEN
        RETURN 0;
    ELSE_IF(root^.LC = NULL AND root^.RC = NULL)
        RETURN 1;
    ELSE
        RETURN numb_leaves(root^.LC) + numb_leaves(root^.RC);
    END_IF
END

FUNCTION maximum_val(root:^BT) : INTEGER
BEGIN
    IF (root <> NULL) THEN
        IF (root^.LC = NULL AND root^.RC = NULL) THEN
            RETURN root^.VAL;
        ELSE_IF(root^.LC = NULL) THEN
            RETURN max(root^.VAL,maximum_val(root^.RC));
        ELSE_IF(root^.RC = NULL) THEN
            RETURN max(root^.VAL,maximum_val(root^.LC));
        ELSE
            RETURN max(maximum_val(root^.LC),maximum_val(root^.RC));
        END_IF
    END_IF
END

FUNCTION isfull(root:^BT) : BOOLEAN
BEGIN
    IF (root = NULL) THEN
        RETURN TRUE;
    END_IF
    IF (root^.LC = NULL AND root^.RC = NULL) THEN
        RETURN TRUE;
    END_IF
    IF(root^.LC <>NULL AND root^.RC <>NULL) THEN
        RETURN isfull(root^.LC) AND isfull(root^.RC);
    END_IF
    RETURN FALSE;
END
